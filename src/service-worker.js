/* global self, process, URL, Response, caches, FormData */
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import {
  MAINPAGE_PATH,
  MAINPAGE_RELATIVE_PATH,
  SHARED_FILES_RELATIVE_PATH,
  SHARED_FILES_CACHE_ID,
  SHARED_FILES_FORM_PATH,
  SHARED_FILES_PARAMETER
} from "./zip-manager/business/constants.js";

import { clientsClaim } from "workbox-core";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";

const MAINPAGE_REDIRECT_PATH = MAINPAGE_RELATIVE_PATH + SHARED_FILES_PARAMETER;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }
    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }
    // If this looks like a URL for a resource, because it contains a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + MAINPAGE_PATH)
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
registerRoute(SHARED_FILES_RELATIVE_PATH, getSharedFiles, "GET");
registerRoute(SHARED_FILES_RELATIVE_PATH, setSharedFiles, "POST");

async function setSharedFiles({ event }) {
  const formData = await event.request.formData();
  const cache = await caches.open(SHARED_FILES_CACHE_ID);
  await cache.put(
    new URL(SHARED_FILES_FORM_PATH, self.location).href,
    new Response(formData)
  );
  return Response.redirect(MAINPAGE_REDIRECT_PATH, 303);
}

function getSharedFiles({ event }) {
  event.respondWith(getSharedFilesResponse());
}

async function getSharedFilesResponse() {
  const cache = await caches.open(SHARED_FILES_CACHE_ID);
  const response = await cache.match(SHARED_FILES_FORM_PATH);
  if (response) {
    await cache.delete(SHARED_FILES_FORM_PATH);
    return response;
  }
}
